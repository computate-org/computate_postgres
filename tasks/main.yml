---
- name: "install podman dependency"
  package:
    name:
      - python3
      - python3-pip
      - libselinux-python
      - libsemanage-python
      - podman
    state: present
  become: true
  when: POSTGRES_USE_PODMAN and ansible_pkg_mgr != 'homebrew' and POSTGRES_PYTHON == '/usr/bin/python'
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
- name: "install Ansible dependencies"
  package:
    name:
      - python3
      - python3-pip
      - python3-libselinux
      - python3-libsemanage
    state: present
  become: true
  when: ansible_pkg_mgr != 'homebrew' and POSTGRES_PYTHON == '/usr/bin/python3'
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
- name: "install podman dependency"
  package:
    name:
      - podman
    state: present
  become: true
  when: POSTGRES_USE_PODMAN and ansible_pkg_mgr != 'homebrew' and POSTGRES_PYTHON == '/usr/bin/python3'
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
- name: Install {{ POSTGRES_NAME }} development dependencies for Linux
  package:
    name:
      - gcc
      - make
      - git
      - bison
      - flex
      - readline-devel
      - zlib-devel
      - systemd-devel
      - libxml2-devel
      - libxslt-devel
    state: present
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Install extra {{ POSTGRES_NAME }} dependencies for Red Hat Linux family
  package:
    name:
      - openssl-devel
    state: present
  become: true
  when: ansible_os_family == 'RedHat'
- name: Install {{ POSTGRES_NAME }} development dependencies for MacOSX
  vars:
    ansible_python_interpreter: /usr/bin/python
  package:
    name:
      - gcc
      - git
      - open-sp
    state: present
  become: false
  when: ansible_pkg_mgr == 'homebrew'
- name: Create the {{ POSTGRES_NAME }} source directory {{ POSTGRES_SRC }}
  file:
    name: "{{ POSTGRES_SRC }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
- name: Create the {{ POSTGRES_NAME }} opt directory {{ POSTGRES_OPT }}
  file:
    name: "{{ POSTGRES_OPT }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
- name: Clone the {{ POSTGRES_NAME }} source code into {{ POSTGRES_SRC }}
  git:
    repo: "{{ POSTGRES_REPO }}"
    dest: "{{ POSTGRES_SRC }}"
    version: "{{ POSTGRES_TAG }}"
    depth: "1"
- name: Configure the {{ POSTGRES_NAME }} application for Linux
  shell: "./configure --with-openssl --with-libxml --with-libxslt --with-systemd --with-selinux --prefix={{ POSTGRES_OPT }}"
  args:
    chdir: "{{ POSTGRES_SRC }}"
    creates: "{{ POSTGRES_SRC }}/GNUmakefile"
  when: ansible_pkg_mgr != 'homebrew'
- name: Configure the {{ POSTGRES_NAME }} application for MacOSX
  shell: "./configure --prefix={{ POSTGRES_OPT }}"
  args:
    chdir: "{{ POSTGRES_SRC }}"
    creates: "{{ POSTGRES_SRC }}/GNUmakefile"
  when: ansible_pkg_mgr == 'homebrew'
- name: Make the {{ POSTGRES_NAME }} application for Linux
  shell: make world
  args:
    chdir: "{{ POSTGRES_SRC }}"
    creates: "{{ POSTGRES_SRC }}/src/bin/psql/psql"
  when: ansible_pkg_mgr != 'homebrew'
- name: Make the {{ POSTGRES_NAME }} application for MacOSX
  shell: make install
  args:
    chdir: "{{ POSTGRES_SRC }}"
    creates: "{{ POSTGRES_SRC }}/src/bin/psql/psql"
  when: ansible_pkg_mgr == 'homebrew'
- name: Make the {{ POSTGRES_NAME }} application
  shell: make install-world
  args:
    chdir: "{{ POSTGRES_SRC }}"
    creates: "{{ POSTGRES_OPT }}/bin/psql"
  become: yes
  when: ansible_pkg_mgr != 'homebrew'
- name: Create the psql binary symbolic link. 
  file:
    src: "{{ POSTGRES_OPT }}/bin/psql"
    dest: "/usr/local/bin/psql"
    state: link
  become: yes
- name: Update ldconfig
  shell: ldconfig
  become: yes
  when: ansible_pkg_mgr != 'homebrew'

- name: Check podman version
  shell: "podman -v | cut -d ' ' -f3 | cut -d '.' -f1"
  register: PODMAN_MAJOR_VERSION_SHELL
- name: Set podman major version
  set_fact:
    PODMAN_MAJOR_VERSION: "{{ PODMAN_MAJOR_VERSION_SHELL.stdout }}"
- name: Debug PODMAN_MAJOR_VERSION
  debug:
    var: PODMAN_MAJOR_VERSION
  when: POSTGRES_USE_PODMAN
- name: Set network vars
  set_fact:
    POSTGRES_POD_NETWORK: "{{ (POSTGRES_NETWORK if (PODMAN_MAJOR_VERSION | int) > 1) | default(omit) }}"
    POSTGRES_CONTAINER_NETWORK: "{{ ('host' if (PODMAN_MAJOR_VERSION | int) <= 1) | default(omit) }}"
- name: Debug POSTGRES_POD_NETWORK
  debug:
    var: POSTGRES_POD_NETWORK
  when: POSTGRES_USE_PODMAN
- name: Debug POSTGRES_CONTAINER_NETWORK
  debug:
    var: POSTGRES_CONTAINER_NETWORK
  when: POSTGRES_USE_PODMAN
- name: Create a podman network {{ POSTGRES_NETWORK }}
  containers.podman.podman_network:
    name: "{{ POSTGRES_NETWORK }}"
    state: present
  become: true
  when: POSTGRES_USE_PODMAN and POSTGRES_POD_NETWORK is defined
- name: Create a podman pod {{ POSTGRES_POD }}
  containers.podman.podman_pod:
    name: "{{ POSTGRES_POD }}"
    network: "{{ POSTGRES_NETWORK }}"
    publish:
      - "{{ POSTGRES_PORT }}:{{ POSTGRES_PORT }}"
    state: started
  become: true
  when: POSTGRES_USE_PODMAN and POSTGRES_POD_NETWORK is defined

- name: Set container_manage_cgroup flag on to run podman containers as systemd services and keep it persistent across reboots
  ansible.posix.seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  become: true
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
- name: Create the {{ POSTGRES_NAME }} data directory {{ POSTGRES_DATA }}. 
  file:
    name: "{{ POSTGRES_DATA }}"
    state: directory
    owner: "{{ POSTGRES_USER }}"
    mode: 0700
  become: true
- name: set SELinux permissions on {{ POSTGRES_DATA }}
  sefcontext:
    target: "{{ POSTGRES_DATA }}"
    setype: container_file_t
  become: true
  vars:
    ansible_python_interpreter: "{{ POSTGRES_PYTHON }}"
- name: reload SELinux policy to ensure that {{ POSTGRES_NAME }} is executable
  command: "restorecon -irv {{ POSTGRES_DATA }}"
  become: true
- name: Initialize the database
  shell: "{{ POSTGRES_OPT }}/bin/initdb -D {{ POSTGRES_DATA }}"
  args:
    creates: "{{ POSTGRES_DATA }}/pg_hba.conf"
- name: Create the {{ POSTGRES_NAME }} systemd service {{ POSTGRES_SYSTEMD }}. 
  template:
    src: app_systemd.service
    dest: "{{ POSTGRES_SYSTEMD }}"
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Reload the services. 
  systemd:
    daemon_reload: true
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ POSTGRES_NAME }} service. 
  service:
    name: "{{ POSTGRES_SERVICE }}"
    enabled: true
    state: restarted
  become: true
  when: ansible_pkg_mgr != 'homebrew'
- name: Create the {{ POSTGRES_NAME }} launchd service.
  template:
    src: solr_launchd_service.j2
    dest: "~/Library/LaunchAgents/org.solr.plist"
  when: ansible_pkg_mgr == 'homebrew'
- name: Load the {{ POSTGRES_NAME }} launchd service.
  shell: launchctl load ~/Library/LaunchAgents/org.solr.plist
  when: ansible_pkg_mgr == 'homebrew'
- name: Start the {{ POSTGRES_NAME }} launchd service.
  shell: launchctl start org.solr
  when: ansible_pkg_mgr == 'homebrew'
  changed_when: false

